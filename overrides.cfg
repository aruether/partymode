# Licensed under the BSD license.  See full license in LICENSE file.
# http://www.lightshowpi.org/
#
# This is the configuration file for the program. This file follows conventions
# of a python config file. The variables defined below control variable aspects
# of the program.
#
# Author: Chris Usey (chris.usey@gmail.com)
# Author: Todd Giles (todd.giles@gmail.com)
#
# Copy this sample file and rename as 'overrides.cfg' in this directory and then
# modify any and all settings that you need to or would like to.
#
# A sample playlist is included to get you started and is distributed under a 
# creative commons license:
#
# http://freemusicarchive.org/music/Various_Artists_Rushcoil/XMAS_Compilation_2010
# XMAS Compilation 2010 - http://rushcoil.bandcamp.com/album/xmas-compilation-2010
# Various Artists: (Rushcoil)
# License: http://creativecommons.org/licenses/by-nc-sa/4.0


[hardware]
gpio_pins = 0,1,2,3,4
pin_modes = pwm, pwm, pwm, onoff, onoff
pwm_range = 100

[lightshow]
mode = playlist
playlist_path = /home/pi/partymode/partymode_playlist
randomize_playlist = yes



# Default is to be on for 10 seconds and off for 1 with no channel_control overrides
# no audio played.

preshow_configuration = 
	{
		"transitions": [
			{
				"type": "off",
				"duration": 15,
				"channel_control": {
					"off": [4]
				}
			}
		],
		"audio_file": "/home/pi/partymode/sounds/machine.mp3"
	}	


# ---------------------------------------------------------------
# postshow config
# ---------------------------------------------------------------

#postshow_configuration = 
# {
# 	"transitions": [
# 		{
# 			"type": "off",
# 			"duration": 15,
# 			"channel_control": {"off": [4]}
# 		}
# 	],
# 	"audio_file": "/home/pi/machine.mp3"
# }


always_on_channels = 4

# Default (-1) disables each of these settings
#always_on_channels = -1
always_off_channels = -1
invert_channels = -1

# Allow lights to become less "blinky" by fading out after a peak response
# Typical values should be in the range of 0.05 to 0.20
# Smaller values will cause the lights to remain on longer
# Setting decay_factor to 0 will disable this functionality
decay_factor = 0

# ---------------------------------------------------------------
# attenuate percentage
# ---------------------------------------------------------------

# Lower the response value for the lights by a percentage
# Typical values should be in the range of 20-50
# Higher values will cause the lights to be more off than on in onoff mode
# Setting attenuate_pct to 0 will disable this functionality
attenuate_pct = 0

# ---------------------------------------------------------------
# Standard Deviation
# ---------------------------------------------------------------

# Once the mean audio level and standard deviation is calculated for a channel
# the standard deviation is used to determine the range of audio levels that
# change the brightness level of the light(s) on that channel (presuming PWM is enabled).
#
# If the audio level is less than (mean - SD_low), lights will be off.
# If the audio level is more than (mean + SD_high), lights will be at maximum brightness.
# Between these two values, the brightness will be set proportionate to where the audio
# level falls in this range.
#
# SD_low=0.5 and SD_high=0.75 preserve the original behavior by default.

SD_low = 0.5
SD_high = 0.75

# light_delay is the number of seconds the light display is delayed from the input audio
# use zero for an audio device output. Typically this is less than 1.0
light_delay = 0.0

# Set the logging level of the lightshow module
# DEBUG
# INFO
# WARNING
# ERROR
# CRITICAL
log_level = INFO

[audio_processing]
# Note: You may have to delete the song cache after changing these settings.

chunk_size = 2048

# The following values control the frequencies to which the channels will
# respond. With min_frequency being the lowest frequency for which a channel
# will be activated and max_frequency being the max frequency for which a 
# channel will be activated.

# The frequency range will be evenly divided between all the channels defined
# in gpio_pins. 

# Note that custom_channel_frequencies overrides these settings.
min_frequency = 20
max_frequency = 15000

# The following setting can be used to custom map the channels, in effect
# this can programmatically allow you to switch a specific channel of
# lights to a different frequency without having to physically rewire the
# channels.

# For example: Imagine we have 8 channel's output that are connected to
# corresponding gpio_pins. When the frequencies are mapped without using
# custom_channel_mapping, and with a channel mapping defined as:
#custom_channel_mapping = 1,2,3,4,5,6,7,8
# the lowest frequency is assigned to channel 1, the next highest to channel
# 2, and so on until the highest value is mapped to channel 8 (the 8th pin
# defined in gpio_pins).

# Now say you wanted your THIRD channel to have the lowest frequency, without
# using custom_channel_mapping you would have to physically rewire channel 3.
# With custom channel mapping you simply define:
#custom_channel_mapping = 1,2,1,4,5,6,7,8
# Now both channel 1 and channel 3 will activated when the lowest frequency is
# played. custom_channel_mapping must be the same size as gpio_pins.

# If you want to create a mirroring effect for the lights define:
#custom_channel_mapping = 1,2,3,4,4,3,2,1
# With custom channel mapping the program will only calculate and distribute
# frequencies for the highest channel listed in custom_channel_mapping. So in
# this mirroring example, the program will evenly distribute the frequencies.

# The default is not to define custom channel mapping and let the program
# map the channels 1:1
custom_channel_mapping =


# Defining custom_channel_frequencies overrides the min_frequency and
# max_frequency settings, allowing you to define a custom list of frequencies
# that should be utilized for each channel. The list must be the size of
# (gpio_pins + 1) or if custom_channel_mapping is being used it must be the
# size of the max value + 1 in the custom_channel_mapping list.
#custom_channel_frequencies = 0,156,313,625,1250,2500,5000,10000,15000
# Raspberry Pi Model B+
#custom_channel_frequencies = 0,833,1666,2499,3332,4165,4998,5831,6664,7497,8330,9163,10829,11662,12495,13328,14161,15000
custom_channel_frequencies =


